name: Build and Release

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    tags: v*
    branches:
      - master
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build.yml"
jobs:
  release:
    name: Release pushed tag
    runs-on: ubuntu-latest
    outputs:
      pre_release: ${{ steps.check.outputs.pre-release }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/'))

      - name: Check release type
        id: check
        if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/'))
        run: |
            if echo ${{ github.ref_name }} | grep -qP '(alpha|beta|rc)'; then
              echo pre-release=true >> $GITHUB_OUTPUT
            else
              echo pre-release=false >> $GITHUB_OUTPUT
            fi

      - name: Get change log
        if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/'))
        run: |
            git fetch --tags --unshallow
            if [[ "${{ steps.check.outputs.pre-release }}" == true ]]; then
              LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
            else
              LAST_TAG=$(git tag --sort=-v:refname | grep -vE "alpha|beta|rc" | grep -v "${{ github.ref_name }}" | head -1)
            fi
            git log --format="- %h%n%s%n%b" $LAST_TAG...HEAD > changelog.md
            echo **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ github.ref_name }} >> changelog.md

      - name: Create release
        if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            gh release create "${{ github.ref_name }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${{ github.ref_name }}" \
              $([[ ${{ steps.check.outputs.pre-release }} == true ]] && echo --prerelease) \
              -F changelog.md \
              
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux, darwin]
        goarch: [amd64, 386]
        exclude:
          # Exclude i386 on darwin
          - goarch: 386
            goos: darwin
        include:
          # BEIGIN MacOS ARM64
          - goos: darwin
            goarch: arm64
          # END MacOS ARM64
          # BEGIN Linux ARM 7 8
          - goos: linux
            goarch: arm
            goarm: 7          
          - goos: linux
            goarch: arm64
          # END Linux ARM 7 8
          # BEGIN Android ARM 8
          - goos: android
            goarch: arm64
          # END Android ARM 8
          # Windows ARM
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
            goarm: 7
      fail-fast: false

    runs-on: ubuntu-latest
    needs: release
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0
    steps:
      - name: Checkout codebase
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
          
      - name: Show workflow information 
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Get project dependencies
        run: go mod download
 
      - name: Build
        run: |
          mkdir -p build_assets
          if ! [[ -z "${{ needs.release.outputs.pre_release }}" ]]; then
            export VERSION=${{ github.ref_name }} 
          else
            git fetch --tags --unshallow
          fi
          export CGO_ENABLED=0
          make
          find . -maxdepth 1 -type f -regex './wgcf-cli\(\|.exe\)' -exec mv {} ./build_assets/ \;

      - name: Copy README.md & LICENSE
        run: |
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE

      - name: Create Tar-Zstd archive
        shell: bash
        if: github.event_name == 'release' || (github.event_name == 'push' && (contains(github.ref, 'refs/tags/')))
        run: |
          pushd build_assets || exit 1
          touch -mt $(date +%Y01010000) *
          tar --zstd -cvf ../wgcf-cli-${{ env.ASSET_NAME }}.tar.zstd .
          popd || exit 1
          FILE=./wgcf-cli-${{ env.ASSET_NAME }}.tar.zstd
          DGST=$FILE.dgst
          for METHOD in {"md5","sha1","sha256","sha512"};do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          name: wgcf-cli-${{ env.ASSET_NAME }}
          path: |
            ./build_assets/*

      - name: Upload archives to release
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        if: github.event_name == 'release' || (github.event_name == 'push' && (contains(github.ref, 'refs/tags/')))
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./wgcf-cli-${{ env.ASSET_NAME }}.tar.zstd*
          tag: ${{ github.ref }}
          file_glob: true

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        if: github.event_name == 'release' || (github.event_name == 'push' && (contains(github.ref, 'refs/tags/')))
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./wgcf-cli-${{ env.ASSET_NAME }}
          tag: ${{ github.ref }}
          file_glob: true
